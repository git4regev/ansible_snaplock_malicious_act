---
- name: Protect Snapshots from Malicious Activity using SnapLock for SnapVault
  hosts: localhost
  gather_facts: no
  collections:
    - netapp.ontap
  vars_files:
    - immutable_backups_config.yml
  vars:
    nas_volume_list: []
    login: &login
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: true
      validate_certs: false

  tasks:
  - name: Gather volume facts from production ONTAP system
    na_ontap_info:
      state: info
      hostname: "{{ prod_cluster }}"
      gather_subset:
        - "volume_info"
        - "snapshot_policy_info"
      <<: *login
    register: prod_volume_info

  - name: Gather aggregate facts from protection ONTAP system
    na_ontap_info:
      state: info
      hostname: "{{ protection_cluster }}"
      gather_subset:
        - "volume_info"
        - "aggregate_info"
      <<: *login
    register: protect_aggr_info

  - name: Build a list of all NAS volumes on production cluster
    set_fact:
      nas_volume_list: "{{ nas_volume_list + [{'prod_svm': item.value.volume_id_attributes.owning_vserver_name, 'prod_volume': item.value.volume_id_attributes.name}] }}"
    no_log: true
    with_dict:
      "{{ prod_volume_info.ontap_info['volume_info'] }}"
    when:
      - "prod_volumes == None"
      - "item.value.volume_state_attributes.is_cluster_volume == 'true'"
      - "item.value.volume_state_attributes.is_node_root == 'false'"
      - "item.value.volume_state_attributes.is_vserver_root == 'false'"
      - "item.value.volume_state_attributes.is_junction_active == 'true'"

  - name: Decide if to use generated list of NAS volumes or provided list of volumes
    set_fact:
      prod_volumes: "{{ nas_volume_list }}"
    when: "prod_volumes == None"

  - name: Create SnapMirror policy on protection svm
    na_ontap_snapmirror_policy:
      state: present
      vserver: "{{ protection_svm }}"
      policy_name: "{{ snapvault_policy }}"
      policy_type: "vault"
      snapmirror_label: "{{ snapshot_snapvault_label }}"
      keep: "{{ snapvault_snapshots_to_keep }}"
      use_rest: never
      hostname: "{{ protection_cluster }}"
      <<: *login

  - include_tasks: Malicious_act_protection_helper.yml # This way we loop across multiple tasks as a block
    with_items:
      - "{{ prod_volumes }}"
    loop_control:
      loop_var: volume
